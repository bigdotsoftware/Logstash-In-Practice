input {
    file {
        path => ["/home/user/Logstash-In-Practice/19 - Aggregate Plugin/sample2.log"]
        sincedb_path => "/dev/null"
        start_position => "beginning"
        type => "my-log-file"
    }
}

filter {
    json {
        source => "[event][original]"
        remove_field => [ "[event][original]" ]
    }
    date {
        locale => "en"
        match => [ "timestamp", "ISO8601" ]
        timezone => "Europe/Rome"
        remove_field => [ "[timestamp]" ]
    }
    ### Start aggregate
    if "list entries returned" in [message] {
     aggregate {
       task_id => "%{thread}"
       map_action => "create"
       code => "
            map['start_time'] = event.get('@timestamp')
        "
     }
   }
   
   ### Process aggregate
   if "has address" in [message] {
     grok {
        match=> { message => "interface %{NOTSPACE:interface} has address %{IPORHOST:address}" }
     }
     aggregate {
       task_id => "%{thread}"
       map_action => "update"
       code => "
            map['interfaces'] ||= []
            map['interfaces'] << {'interface' => event.get('interface'), 'address' => event.get('address')}
        "
     }
   }
   
   ### Finish aggregate
   if "listing ended" in [message] {
     aggregate {
       task_id => "%{thread}"
       map_action => "update"
       code => "
            event.set('start_time', map['start_time'])
            event.set('end_time', event.get('@timestamp') )
            event.set('duration', (event.get('@timestamp').to_f*1000).to_i - (event.get('start_time').to_f*1000).to_i)
            event.set('interfaces', map['interfaces'] )
        "
       end_of_task => true
     }
   }
   
   if ![duration] {
        #drop all events without 'duration' field
        drop { }
    }
}

output {
    stdout {
    }
}
