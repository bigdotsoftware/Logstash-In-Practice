input {
    file {
        path => ["/home/zuko/Logstash-In-Practice/12 - Conditions and error handling/sample.log"]
        sincedb_path => "/dev/null"
        start_position => "beginning"
        type => "my-log-file"
    }
    file {
        path => ["/home/zuko/fake.log"]
        sincedb_path => "/dev/null"
        start_position => "beginning"
        type => "my-other-file"
    }
}
filter {
    if [type] == "my-other-file" {
        # run a different set of filters for the second input
    }
    if [type] == "my-log-file" {
        grok {
            match=> { message => "%{COMBINEDAPACHELOG}" }
            remove_field => [ "message", "[event][original]" ]
        }
        if "_grokparsefailure" not in [tags] {
            geoip {
                source => "[source][address]"
                target => "geoip"
            }
            date {
                locale => "en"
                match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
                timezone => "Europe/Rome"
            }
        } else {
            mutate {
                add_field => { "corrupted_doc" => true }
            }
        }
    }
}
output {
    if [corrupted_doc] == 'true' {
        elasticsearch {
            hosts => ["http://localhost:9200"]
            index => "dlq-mylogs-apache-v2-%{+YYYY.MM.dd}"
            #user => "elastic"
            #password => "changeme"
        }
    }else{
        elasticsearch {
            hosts => ["http://localhost:9200"]
            index => "mylogs-apache-v2-%{+YYYY.MM.dd}"
            #user => "elastic"
            #password => "changeme"
        }
        stdout {
        }
    }
}

